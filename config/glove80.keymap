/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        pht_right_shift1: pht_right_shift1 {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_RIGHT_SHIFT1";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <59 60 61 43 42 41 29 30 31 77 76 75 62 63 45 44 28 40 58 16 17 19 18 74 73 57 56 11 12 13 14 23 24 25 26 35 36 37 38 48 49 50 39 15 27 51 50 51 52 53 69 70 71 10 46>;
        };

        Pht_Numberlayer: Pht_Numberlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_NUMBERLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            retro-tap;
            hold-trigger-key-positions = <75 76 77 61 60 59 41 42 43 31 30 29>;
            tapping-term-ms = <200>;
        };

        Pht_left_shift: Pht_left_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_LEFT_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <48 49 50 38 37 36 24 25 26 14 13 12 51 39 27 15 69 52 53 70 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 46>;
            bindings = <&kp>, <&kp>;
        };

        pht_right_semicolon: pht_right_semicolon {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_RIGHT_SEMICOLON";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <44 43 42 30 31 41 32 20 19 18 17 29 28 40 58 59 59>;
            flavor = "hold-preferred";
            quick-tap-ms = <50>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&kp PRINTSCREEN>;
        };

        left_backspace: left_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_BACKSPACE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <1 11 12 13 14 15 23 24 25 26 27 35 36 37 38 39 47 48 49 50 51 66 67 68 5 6 7 17 18 19 29 30 31 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 73>;
        };

        mouseclick: mouseclick {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSECLICK";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            quick-tap-ms = <54>;
            retro-tap;
            tapping-term-ms = <30000>;
            hold-trigger-key-positions = <68 0 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79>;
            flavor = "tap-preferred";
        };

        tapdance1: tapdance1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE1";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&kp PRINTSCREEN>, <&date_now>;
        };

        rightenter: rightenter {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTENTER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <58 60 59 75 76 42 41 40>;
            tapping-term-ms = <300>;
        };

        V_3: V_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "V_3";
            bindings = <&kp V>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_LSFT)>;
            keep-mods = <(MOD_LGUI|MOD_LSFT)>;
        };

        x_3: x_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "X_3";
            bindings = <&kp X>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        right_nj: right_nj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp J>;
            label = "RIGHT_NJ";
        };

        date_now: date_now {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(LS(SEMICOLON)))>;
            label = "DATE_NOW";
        };
    };

    combos {
        compatible = "zmk,combos";

        r_dot {
            bindings = <&kp DOT>;
            key-positions = <42 61>;
        };

        r_dot2 {
            bindings = <&kp DOT>;
            key-positions = <61 60>;
        };

        r_right {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <43 42>;
        };

        requal {
            bindings = <&kp EQUAL>;
            key-positions = <29 40>;
        };

        r_minus {
            bindings = <&kp MINUS>;
            key-positions = <41 58>;
        };

        r_ng {
            bindings = <&right_nj>;
            key-positions = <42 59>;
        };

        usb_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <70 73>;
        };

        leftins {
            bindings = <&kp INS>;
            key-positions = <26 39>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <31 30>;
            layers = <0>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <29 30>;
            layers = <0>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <75 76>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <76 77>;
        };

        pgup {
            bindings = <&kp PG_UP>;
            key-positions = <60 75>;
        };

        pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <75 77>;
        };

        f7 {
            bindings = <&kp F7>;
            key-positions = <61 30>;
        };

        f4 {
            bindings = <&kp F4>;
            key-positions = <41 31>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <31 42>;
        };

        altf4 {
            bindings = <&kp LA(F4)>;
            key-positions = <24 25 26>;
        };

        ctrlz {
            bindings = <&kp LC(Z)>;
            key-positions = <38 36>;
        };

        ctrlshiftt {
            bindings = <&kp LC(LS(T))>;
            key-positions = <24 26 13>;
        };

        f8 {
            bindings = <&kp F8>;
            key-positions = <42 77>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <46 63>;
        };

        backslash {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <30 43>;
        };

        rightp {
            bindings = <&kp SLASH>;
            key-positions = <30 41>;
        };

        right_n {
            bindings = <&kp N>;
            key-positions = <38 39>;
        };

        right_m {
            bindings = <&kp M>;
            key-positions = <51 50>;
        };

        rightcrw {
            bindings = <&kp LG(LA(LEFT_CONTROL))>;
            key-positions = <58 59>;
        };

        right_ctrlalt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <41 43>;
        };

        ahffk {
            bindings = <&kp SQT>;
            key-positions = <60 41>;
        };

        f11 {
            bindings = <&kp F11>;
            key-positions = <7 8>;
        };

        f12 {
            bindings = <&kp F12>;
            key-positions = <9 8>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <38 25>;
        };

        f3 {
            bindings = <&kp F3>;
            key-positions = <29 31>;
        };

        right_f1 {
            bindings = <&kp F1>;
            key-positions = <28 29>;
        };

        l_ctrlwin {
            bindings = <&kp LC(LEFT_WIN)>;
            key-positions = <67 66>;
        };

        ctrlalt_ {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <66 68>;
        };

        ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <37 50>;
        };

        ctrlx {
            bindings = <&kp LC(X)>;
            key-positions = <26 13>;
        };

        left_boot {
            bindings = <&bootloader>;
            key-positions = <4 15>;
        };

        right_boot {
            bindings = <&bootloader>;
            key-positions = <5 16>;
        };

        ctrlaltwin {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <58 60>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&bt_3                 &bt_2                         &bt_1       &bt_0               &out OUT_USB                                                                                                                                             &kp F6    &tog 1        &kp F8         &kp F9                         &kp F10
&kp GRAVE             &kp N1                        &kp N2      &x_3                &kp N4        &kp N5                                                                                                                             &kp N6  &kp N7    &kp PAGE_UP   &kp PAGE_DOWN  &kp N0                         &kp EQUAL
&kp TAB               &kp NUMBER_3                  &kp W       &kp E               &kp R         &kp V                                                                                                                              &kp Y   &kp U     &kp I         &kp O          &kp SEMICOLON                  &kp MINUS
&mt LCTRL ESCAPE      &kp A                         &kp S       &kp D               &kp F         &kp G                                                                                                                              &kp H   &kp J     &kp K         &kp L          &pht_right_semicolon 3 PERIOD  &kp HOME
&mt LEFT_SHIFT GRAVE  &Pht_left_shift LEFT_SHIFT Z  &kp Q       &kp C               &kp T         &kp B   &mt LS(LA(LCTRL)) DELETE                  &kp RWIN  &out OUT_USB  &mkp MB1  &mkp MB2             &kp PG_DN                 &kp B   &kp N     &kp M         &kp P          &pht_right_shift1 RSHFT COMMA  &mt RIGHT_SHIFT END
&tapdance1            &Pht_Numberlayer 5 UNDER      &kp DELETE  &mt LEFT_WIN RCTRL  &kp LEFT_ALT          &left_backspace LA(LEFT_SHIFT) BACKSPACE  &mkp MB1  &mkp RCLK     &kp RALT  &rightenter 4 ENTER  &Pht_Numberlayer 1 SPACE          &kp LEFT  &kp UP_ARROW  &kp DOWN       &kp RIGHT                      &magic 2 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                     &kp C_MUTE        &trans        &kp C_VOL_UP       &none            &kp PAUSE_BREAK
&trans        &trans        &trans      &trans      &none     &trans                                                  &kp LPAR   &kp KP_NUM        &kp EQUAL     &kp SLASH          &kp KP_MULTIPLY  &kp PSCRN
&trans        &trans        &trans      &trans      &trans    &trans                                                  &kp RPAR   &kp N7            &kp N8        &kp N9             &kp KP_MINUS     &trans
&trans        &none         &trans      &trans      &trans    &trans                                                  &kp PRCNT  &kp NUMBER_4      &kp N5        &kp NUMBER_6       &trans           &none
&trans        &trans        &trans      &trans      &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp COMMA  &kp N1            &kp NUMBER_2  &kp NUMBER_3       &kp ENTER        &trans
&trans        &trans        &trans      &trans      &trans            &trans  &trans  &trans  &trans  &trans  &kp N0             &kp LEFT_BRACKET  &kp N0        &kp RIGHT_BRACKET  &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR    &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none         &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none         &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&sys_reset    &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&out OUT_TOG  &sys_reset       &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none         &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                             &trans            &trans                &trans                 &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans             &kp AMPERSAND     &kp ASTRK             &trans                 &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp CARET          &kp ASTRK         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp COLON             &kp QUESTION           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans             &kp PERCENT       &kp HASH              &kp LS(AT_SIGN)        &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                     &trans            &trans                &trans                 &trans  &trans
            >;
        };

        enter_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                          &trans          &trans           &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans          &trans          &trans           &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans          &trans          &trans           &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp HOME        &kp UP_ARROW    &kp END          &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN        &kp RIGHT        &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans           &trans                 &trans                &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans           &trans                 &trans                &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp AMPERSAND    &kp ASTERISK           &kp LEFT_PARENTHESIS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp DOLLAR       &kp PERCENT            &kp CARET             &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp EXCLAMATION  &kp AT_SIGN            &kp HASH              &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &kp LEFT_BRACE   &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE       &trans  &trans
            >;
        };
    };
};
